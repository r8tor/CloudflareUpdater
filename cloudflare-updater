#!/bin/bash
#exit if user is not root
[ "$(id -u)" != "0" ] && { echo "For better security only root can read the configuration files. Must be run as root! Aborting"; exit 1;}

# Function: Print a help message.
usage() {
  echo "usage: cloudflare-updater [options]"
  echo "options:"
  echo "  -l    List DNS Records using Zone and API Key from configuration file"
  echo "  -u    Update the DNS Record defined in the configuration file with your current public IP"
  echo "  -h    Show this help message"
}

# Function: Exit with error.
exit_abnormal() {                         
  usage
  exit 1
}

#List DNS Records using Zone and API Key from configuration file
list_dns_records() {
    source /etc/cloudflare.conf                    
    curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records" \
    -H "Authorization: Bearer ${API_TOKEN}" \
    -H "Content-Type: application/json" | jq '.result[] | "\(.id) \(.name) \(.type)"'
    exit 0
}

#Update the DNS Record defined in the configuration file with your current public IP
update_dns_record() {
    #Read config file
    source /etc/cloudflare.conf
    #Determine IP Address
    MY_IP=$(dig +short myip.opendns.com @resolver1.opendns.com)

    #Call Cloudflare API and update record
    curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${ZONE}/dns_records/${RECORD}" \
        -H "Authorization: Bearer ${API_TOKEN}" \
        -H "Content-Type: application/json"  \
        --data "{\"type\":\"${TYPE}\",\"name\":\"${NAME}\",\"content\":\"${MY_IP}\",\"ttl\":${TTL},\"proxied\":${PROXIED}}" | jq >> /var/log/cloudflare.log
    exit 0
}

if [ $# -eq 0 ];
then
    usage
    exit 0
else
  while getopts ":lu" option; do
      case "${option}" in
          l)
              list_dns_records
              ;;
          u)
              update_dns_record                      
          ;;
          h)
              usage
          ;;
          *)
              usage
          ;;
          esac
  done
fi
